#!/usr/bin/env python
# 
# Copyright 2014 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import numpy
#from gnuradio import gr
import gras

class expo(gras.Block):
    """
    docstring for block expo
    """
    def __init__(self):
        gras.Block.__init__(self,
            name="expo",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32])

    def set_parameters(self,g,a,b):
        self.gama=g
        self.alpha=a
        self.beta=b
    def yield_times(self):
        from datetime import date, time, datetime, timedelta
        start = datetime.combine(date.today(), time(0, 0))
        yield start.strftime("%S")
        while True:
            start += timedelta(seconds=7)
            yield start.strftime("%S")
               
    
    def work(self, input_items, output_items):
        in0 = input_items[0]
        out = output_items[0]
        tmrg = []
        o1 = []
        o2 = []
        o3 = []
        o4 = []
        ans = []
        mul = []
        gen = self.yield_times()
        for ii in range(50):
            tmrg.append(gen.next())
            print("tmrg :",tmrg)
        
        for i1 in range(len(tmrg)):
            o1.append((self.gama)/(self.alpha*self.beta))
            print("o1 : ", o1)
        for i2 in range(len(tmrg)):
            o2.append(((self.gama)*(-numpy.exp(self.alpha*i2)))/(self.alpha*(self.beta-self.alpha)))
            print("o2 : ",o2)
        for i3 in range(len(tmrg)):
            o3.append(((self.gama)*(-numpy.exp(self.beta*i2)))/(self.beta*(self.alpha-self.beta)))
            print("o3 : ",o3)
        ans.append(o2)
        print("Final : ",ans)
        for i4 in range(len(ans)):
            out[0:1] = ans
        self.consume(0,1)
        self.produce(0,1)
        
        
        #o2 = -numpy.exp(-2*in0[0:1])
        #o3 = -numpy.exp(-3*in0[0:1])
        #o2=numpy.exp(-(in0[0:1]*self.sigma))
        #print("o2 :",o2)
        #o3=numpy.sin((self.freq*in0[0:1])+(self.sigma))
        #print("o3 :",o3)
        #o4=numpy.sqrt(o1-numpy.square(self.zita))
        #print("o4 :",o4)
            
        """"a = [1,2,3,4]
            b = [2,3,4,5]
            ab = []                        
            for i in range(0, len(a):
            ab.append(a[i]*b[i]) """
            
        """for i in range(0,len(o2)):
            mul.append(o2[i]*o3[i])
            print("mul : ",mul)
            
            ans = o1-(mul/o4)
            #ans.append(o1-((numpy.exp(-in0[0:1]*self.sigma)*(numpy.sin((self.freq*in0[0:1])+(self.sigma))))/numpy.sqrt(o1-numpy.square(self.zita))))
            print("Final Value : ",ans)
       
            out[0:1] = ans"""
         
        
       
            #return len(output_items[0])
        """elif self.zita > 1:
            #o2 = -numpy.exp(-2*in0[0:1])
            #o3 = -numpy.exp(-3*in0[0:1])
            o2=numpy.exp(-in0[0:1]*self.sigma)
            o3=numpy.sin((self.freq*in0[0:1])+(self.sigma))
            o4=numpy.sqrt(o1-numpy.square(self.zita))
            ans = o1-((o2*o3)/o4)
            #ans.append(o1-((numpy.exp(-in0[0:1]*self.sigma)*(numpy.sin((self.freq*in0[0:1])+(self.sigma))))/numpy.sqrt(o1-numpy.square(self.zita))))
            print("Final Value : ",ans)
       
            out[0:1] = ans
         
        
            self.consume(0,1)
            self.produce(0,1) 
            #return len(output_items[0])"""
             
        

            
       
      
