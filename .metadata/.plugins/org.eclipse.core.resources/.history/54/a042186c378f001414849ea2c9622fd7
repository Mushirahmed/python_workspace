#!/usr/bin/env python
# 
# Copyright 2014 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import gras
import numpy
import serial
import time
import sys
import wx
from sbhs import *
from scan_machines import *
import IN
from gnuradio.wxgui import slider

class sbfan(gras.Block):
    
    def __init__(self,window,fan_value,heat_value):
        self.n = window
        self.fan = fan_value
        self.heat = heat_value
        #self.set_fan_heat(self.fan,self.heat)
        #self.fan1 = 0
        #self.heat1 = 0
        
        gras.Block.__init__(self,
            name="sbfan",
            in_sig=[numpy.float32,numpy.float32],
            out_sig=[numpy.float32])
	#from scan_machines import *
	print "Scanning Machines"
	scan_machines()
	# SBHS init
	self.new_device = Sbhs()
	self.new_device.connect(1)
	self.new_device.connect_device(0)
    
    def set_fan_heat(self,fan_value,heat_value):
        self.fan = fan_value
        self.heat = heat_value
        #self.new_device.setFan(self.fan)
        #self.new_device.setHeat(self.heat)
        return (self.fan,self.heat)

 
    def isIntegralWin(self,input_item,window):
	
	if(len(input_item) % window):
		raise Exception(" Value of Window should be an integral value of length of input items")

        
    def work(self, input_items, output_items):
        
        
	#for heat_items in input_items[0]:
		#print "Heat Written", heat_items
		# Set heat as 0 for negative values of heat
		#if heat_items < 0:
			#self.new_device.setHeat(0)
		#else: 
		#	self.new_device.setHeat(heat_items)
        #in0 = []
        #in1 = []
        
        out = output_items[0]
        in0 = input_items[0][0]
        print "Input Zero : ",in0
        in1 = input_items[1][0]
        print "Input One : ",in1
        self.new_device.setFan(in0)
        self.new_device.setHeat(in1)
        a = slider.demo_graph()
        a.my_callback1(val)
                
        print "INPUT_LENGTH",len(input_items)
        """
        for i in range(0,len(input_items)-1):
            print " I ",i
            in0 = input_items[i][0]
            print "IN0 :",in0
            self.new_device.setFan(in0)
           
        for i in range(1,len(input_items)):
            print " I ",i
            in1 = input_items[i][0]
            print "IN1 :",in1
            self.new_device.setHeat(in1)
        """   
        time.sleep(0.4)

        #self.set_fan_heat(self.fan,self.heat)
        #new_fan,new_heat = self.set_fan_heat(in0,in1)
        #self.new_device.setFan(self.fan)
        #self.new_device.setFan(new_fan)
        #time.sleep(0.5)
        #self.new_device.setHeat(self.heat)
        #self.new_device.setHeat(new_heat)
        #time.sleep(0.5)
   
        #For zero Temperatures
        if not self.new_device.getTemp():
            raise Exception(" Check SBHS conection try relogging it and run scan_machines.py")
	    #get temperature
        a = self.new_device.getTemp()
        #out = output_items[:]
        print "A : ",a
        out[:] = a
        #out[:1] = a
        print "Temperature:" ,output_items
        #print "temperature:" ,out  
	
        #self.consume(0,1) #consume from port 0
        for i in range(0,len(input_items)):
            self.consume(0,1)
            self.consume(1,1)
        self.produce(0,1)
        
        

