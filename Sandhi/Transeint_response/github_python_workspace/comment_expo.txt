 """
        gen = self.yield_times()
        for ii in range(20):
            tmrg.append(gen.next())
        # print "tmrg :",tmrg
        """
        
        """
        for i1 in range(0,10):
            o1.append((self.gama)/(self.alpha*self.beta))
            print "o1 : ", o1
        for i2 in range(0,10):
            o2.append(((self.gama)*(-numpy.exp(self.alpha)))/(self.alpha*(self.beta-self.alpha)))
            print "o2 : ",o2
        for i3 in range(0,10):
            o3.append(((self.gama)*(-numpy.exp(self.beta)))/(self.beta*(self.alpha-self.beta)))
            print "o3 : ",o3
        #ans.append(o1+o2+o3)
        for i in range(0,10):
            ans.append(list(numpy.array(o1[i])+numpy.array(o2[i])+numpy.array(o3[i])))
    
        print "Final Ans : ",ans
        print "Type out : ",type(out)
        print "Type ans :",type(ans)
        
        
        out = copy.copy(ans)
        
        #out[0:1] =  ans
        print "Output is : " ,out
        self.consume(0,1)
        self.produce(0,1)
        """
        
        """
        a = self.alpha*(8-(17.233688*(numpy.sqrt(-1))))
        b = self.beta*(8+(17.233688*(numpy.sqrt(-1))))
        c = self.gama
        a = self.alpha*(3)
        b = self.beta*(2)  
        """   
        """
        for i in range(0,20):
            #x = (i/10)+1
            
            t = (0.0001)*(i+10)
            o1.append((c)/(a*b))
            print "o1 : ", o1[i]
            o2.append(((c)*(-numpy.exp((a*t*in0[0])))/(a*(b-a))))
            print "o2 : ",o2[i]
            o3.append(((c)*(-numpy.exp((a*t*in0[0])))/(b*(a-b))))
            print "o3 : ",o3[i]
            ans.append(o1[i]+o2[i]+o3[i])
            print "Final Ans : ",ans
            print "Lenght of Ans :",len(ans)
            print "Time Iteration  : ",t
        """ 
        """
            o1.append((self.c)/(self.a*self.b))
            #o1.append((self.c)/(self.a*self.b))
            #print "o1 : ", o1[i]
            

            #o2.append(((self.gama)*(numpy.exp(((self.alpha-(17.233688*numpy.sqrt(-1)))*t*in0[0])))/(self.alpha*(self.beta-self.alpha))))
            #o2.append(((self.c)*(numpy.exp(((self.a-numpy.sqrt(-1)))*t*in0[0])))/(self.alpha*(self.beta-self.alpha))))
            #print "o2 : ",o2[i]   
            
            #o3.append(((self.gama)*(numpy.exp(((self.beta+(17.233688*numpy.sqrt(-1)))*t*in0[0])))/(self.beta*(self.alpha-self.beta))))
            #o3.append(((self.gama)*(numpy.exp(((self.beta+(17.233688*numpy.sqrt(-1)))*t*in0[0])))/(self.beta*(self.alpha-self.beta))))
            #print "o3 : ",o3[i]
            #ans.append((o1[i]+o2[i]+o3[i]))
            #print "Final Ans : ",ans
            #print "Lenght of Ans :",len(ans)
            #print "Time Iteration : ",t
            #plot_data(float,ans) 
        """
        
            
        """for i in range(0,len(ans)):
            #out = copy.copy(ans[i])
            #out[0:1] =  ans
            #print "Output is : " ,out"""
        """for i1 in range(0,len(ans)):
            final_output.append(o1+ans[i1])
            print "Final OutPut : ", final_output"""
            
            
                 
    """def yield_times(self):
        from datetime import date, time, datetime, timedelta
        start = datetime.combine(date.today(), time(0, 0))
        yield start.strftime("%S")
        while True:
            start += timedelta(seconds=0.5)
            yield start.strftime("%S")"""
            
          
        """ans = o1-(mul/o4)
        #ans.append(o1-((numpy.exp(-in0[0:1]*self.sigma)*(numpy.sin((self.freq*in0[0:1])+(self.sigma))))/numpy.sqrt(o1-numpy.square(self.zita))))
        print("Final Value : ",ans)
        out[0:1] = ans"""
        